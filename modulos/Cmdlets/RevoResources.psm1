<#MIT License

Copyright (c) 2017 Rodolfo Castelo Méndez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

#
# Generated by: Rodolfo Castelo Méndez
#
# Generated on: 10/31/2017
#>

function Get-FilePath{
    <#
        .SYNOPSIS
        Permite la obtención de la ruta de algun archivo.
                
        .DESCRIPTION
        Permite la obtención de la ruta de algun archivo, adicional a ello permite filtrar
        por ciertos tipos de archivos.
                
        .EXAMPLE
        Get-Filepath

        Solicitará la ruta de un archivo de cualquier extensión comenzando en el perfil del usuario 
        que ejecuta el comando
        
        .EXAMPLE
        Get-Filepath -Title "Selecciona el archivo HTML" -Filter "HTML (HTML files *.html)|*.html"

        Solicitará la ruta de un archivo HTML comenzando en el perfil del usuario que ejecuta el comando      

        .PARAMETER Title
        Parametro de tipo string que permite al usuario especificar el título de la ventana que 
        solicitará el archivo.

        .PARAMETER Filter
        Parametro de tipo String que permite determinar un tipo de archivo en particular que desee.

        .PARAMETER Path
        Parametro de tipo String que nos permite establecer una ruta de inicio en la búsqueda
        del archivo.
    #>
    [cmdletbinding()]
    param(
            [string]$Title,
            [string]$Filter =  "Multiple Files (*.*)|*.*",
            [string]$Path = $env:USERPROFILE
    )
    process{
        if(Confirm-InteractiveEnviroment){
            if($Title -eq $null){$Title = "Ubica el archivo que desees"}
	        [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
	        $OBJ_IMP_PT = New-Object System.Windows.Forms.OpenFileDialog
	        $OBJ_IMP_PT.InitialDirectory = $Path
	        $OBJ_IMP_PT.Filter = $Filter
	        $OBJ_IMP_PT.Title = $Title
	        $Show = $OBJ_IMP_PT.ShowDialog()
	        If ($Show -eq "OK")
	        {
		        Return $OBJ_IMP_PT.FileName
	        }
            else{
                Write-Warning "No seleccionaste ningún archivo"
            }
        }
        else{
            if($Title -eq $null){$Title = "Proporciona la ruta completa del archivo que desees"}
            Write-Host $Title
            $INT_PAT = Read-Host
            $TST_PAT = Test-Path -path $INT_PAT -ErrorAction SilentlyContinue
	        if(!$INT_PAT){
				Write-Warning "No seleccionaste ningún archivo"
				break
			}
			if($TST_PAT){
                Return $INT_PAT
	        }
            else{
                Write-Warning "La ruta proporcionada no es correcta"
            }
        }
    }
}

function Get-FolderPath{
    <#
        .SYNOPSIS
        Permite la obtención de la ruta de alguna carpeta.
                
        .DESCRIPTION
        Permite la obtención de la ruta de alguna carpeta permitiendo generar o imponer una descripción personalizada
        asi como el poder o no, crear una nueva carpeta en el proceso.
                
        .EXAMPLE
        Get-FolderPath

        Solicitará la ruta de una carpeta permitiendo la creación de alguna nueva y utilizando "Encuentra tu carpeta"
        como descripción.
        
        .EXAMPLE
        Get-FolderPath -NewFolder $false

        Solicitará la ruta de una carpeta evitando la creación de alguna nueva y utilizando "Encuentra tu carpeta"
        como descripción.      
                
        .EXAMPLE
        Get-FolderPath -NewFolder $false -Description 'Encuentra la carpeta para el archivo'

        Solicitará la ruta de una carpeta evitando la creación de alguna nueva y utilizando "Encuentra la carpeta 
        para el archivo" como descripción. 

        .PARAMETER NewFolder
        Parametro de tipo boleano que determinado la posibilidad de crear o no, nuevas carpetas en el proceso
        de ubicación de una existente.

        .PARAMETER Description
        Parametro de tipo String que permite establecer una descripción determinada.

    #>
    [cmdletbinding()]
    param(
            [bool]$NewFolder = $true,
            [string]$Description
    )
    process{
        if(Confirm-InteractiveEnviroment){
            if($Description -eq $null){ $Description =  "Encuentra tu carpeta" }
            [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
            $OBJ_IMP_PT = New-Object System.Windows.Forms.FolderBrowserDialog
            $OBJ_IMP_PT.ShowNewFolderButton = $NewFolder
            $OBJ_IMP_PT.Description = $Description
            $Show = $OBJ_IMP_PT.ShowDialog()
            If ($Show -eq "OK")
            {
	            Return $OBJ_IMP_PT.SelectedPath
            }
            else{
                Write-Warning "No seleccionaste ninguna carpeta"
            }
        }
        else{
            if($Description -eq $null){ $Description =  'Proporciona la ruta de la carpeta que necesitas' }
            Write-Host $Description
            $INT_PAT = Read-Host
            $TST_PAT = Test-Path -path $INT_PAT -ErrorAction SilentlyContinue
	        if(!$INT_PAT){
				Write-Warning "No seleccionaste ninguna carpeta"
				break
			}
			if($TST_PAT){
                Return $INT_PAT
	        }
            else{
                Write-Warning "La ruta proporcionada no es correcta"
            }
        }
    


    }
}

function Get-SelectedTime{
    <#
        .SYNOPSIS
        Permite la obtención de una fecha y/u hora determinada mediante una interfaz visual.
                
        .DESCRIPTION
        Permite la obtención de una fecha y/u hora determinada mediante una interfaz visual.
                
        .EXAMPLE
        Get-SelectedTime

        Solicitará establecer una hora y fecha determinada.
        
        .EXAMPLE
        Get-SelectedTime -Description "Aqui tu texto"

        Solicitará establecer una hora y fecha determinada con el anuncio de "Aqui tu texto" en el cuadro.      
                
        .EXAMPLE
        Get-SelectedTime -OnlyDate $true

        Solicitará establecer una fecha determinada. La hora que se utilizará será la que se tiene actualmente
        en el computador

        .EXAMPLE
        Get-SelectedTime -OnlyTime $true

        Solicitará establecer una hora determinada. La fecha que se utilizará será la que se tiene actualmente
        en el computador

        .PARAMETER FullDetails
        Parametro de tipo boleano que determina si se desea o no la hora y el día en conjunto.

        .PARAMETER OnlyDate
        Parametro de tipo boleano que determina si se desea o no sólo la fecha.

        .PARAMETER OnlyTime
        Parametro de tipo boleano que determina si se desea o no sólo la hora.

        .PARAMETER Description
        Parametro de tipo String que permite establecer una descripción para guiar al con el fin de esta invocación.
    #>
    [cmdletbinding(
        DefaultParameterSetName='Full'
    )]
    param(
        [Parameter(Position=0,ParameterSetName='Full')]
        [bool]$FullDetails = $true,
        [Parameter(Position=0,ParameterSetName='Date')]
        [bool]$OnlyDate,
        [Parameter(Position=0,ParameterSetName='Time')]
        [bool]$OnlyTime,
        [string]$Description = 'Selecciona la fecha y hora que deseas'
        
    )
    begin{
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
    }
    process{
        if(($FullDetails -eq $false) -and (!$OnlyDate) -and (!$OnlyTime)){
            Write-Warning 'No se seleccionó un modo de trabajo'
            break
        }
        $GBL_FORM = New-Object Windows.Forms.Form 

        $GBL_FORM.Size = New-Object Drawing.Size @(250,250) 
        $GBL_FORM.StartPosition = "CenterScreen"
        $GBL_FORM.MaximumSize = New-Object Drawing.Size @(250,250) 
        $GBL_FORM.MinimumSize = New-Object Drawing.Size @(250,250) 
        $GBL_FORM.ShowIcon = $false

        $GBL_LBL= New-Object System.Windows.Forms.Label
        $GBL_LBL.Location = New-Object System.Drawing.Point(0, 5)
        $GBL_LBL.Size = New-Object System.Drawing.Point(240, 15)
        $GBL_LBL.TextAlign = "MiddleCenter"
        $GBL_LBL.Margin = 0
        
        $PCK_DT_TM = New-Object System.Windows.Forms.DateTimePicker 
        $PCK_DT_TM.Location = New-Object System.Drawing.Point(0,25)
        $PCK_DT_TM.Size = New-Object System.Drawing.Point(240, 15)
        $PCK_DT_TM.MinDate = '1/1/1900'
        $PCK_DT_TM.MaxDate = '12/31/2099'
        $PCK_DT_TM.ShowCheckBox = $false
        if($Description -ne 'Selecciona la fecha y hora que deseas'){
            $GBL_LBL.Text = $Description
            $GBL_FORM.Controls.Add($GBL_LBL)
        }
        else{
            if($OnlyDate -eq $true){
                $GBL_LBL.Text = 'Selecciona el día que deseas'
                $GBL_FORM.Controls.Add($GBL_LBL)
            }
            elseif($OnlyTime -eq $true){
                $PCK_DT_TM.Format = 'Time'
                $PCK_DT_TM.ShowUpDown = $True
                $GBL_LBL.Text = 'Selecciona la hora que deseas'
                $GBL_FORM.Controls.Add($GBL_LBL)
            }
            else{
                $PCK_DT_TM.Format = 'Time'
                $GBL_LBL.Text = $Description
                $GBL_FORM.Controls.Add($GBL_LBL)
            }
        }
        $PCK_DT_TM.DropDownAlign = 'Left'

        $GBL_FORM.Controls.Add($PCK_DT_TM) 

        $GBL_OK_BTN = New-Object System.Windows.Forms.Button
        $GBL_OK_BTN.Location = New-Object System.Drawing.Point(38,175)
        $GBL_OK_BTN.Size = New-Object System.Drawing.Size(75,23)
        $GBL_OK_BTN.Text = "OK"
        $GBL_OK_BTN.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $GBL_FORM.AcceptButton = $GBL_OK_BTN
        $GBL_FORM.Controls.Add($GBL_OK_BTN)

        $GBL_CN_BTN = New-Object System.Windows.Forms.Button
        $GBL_CN_BTN.Location = New-Object System.Drawing.Point(113,175)
        $GBL_CN_BTN.Size = New-Object System.Drawing.Size(75,23)
        $GBL_CN_BTN.Text = "Cancel"
        $GBL_CN_BTN.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $GBL_FORM.CancelButton = $GBL_CN_BTN
        $GBL_FORM.Controls.Add($GBL_CN_BTN)

        $GBL_FORM.Topmost = $True

        $GBL_RESULT = $GBL_FORM.ShowDialog() 

        if ($GBL_RESULT -eq [System.Windows.Forms.DialogResult]::OK)
        {
            $OUTPUT = $PCK_DT_TM.Value
        }
        else{
            Write-Warning 'No se seleccionó un valor de fecha y/u hora determinado'
            break
        }
        return $OUTPUT
    }
}

function Get-TextBox{
<#
        .SYNOPSIS
        Permite la obtención de un determinado texto mediante una interfaz visual.
                
        .DESCRIPTION
        Permite la obtención de un determinado texto mediante una interfaz visual adicionando una descripción
        para guiar al usuario al momento de uso. Por defecto, soporta la inserción de texto con saltos de
        línea entre él.
                
        .EXAMPLE
        Get-TextBox

        Solicitará un texto mediante la ventana gráfica de dimensiones 150 x 150
        
        .EXAMPLE
        Get-TextBox -Height 200

        Solicitará un texto mediante la ventana gráfica de dimensiones 150 x 200
        
        .EXAMPLE
        Get-TextBox -Width 200

        Solicitará un texto mediante la ventana gráfica de dimensiones 200 x 150
        
        .EXAMPLE
        Get-TextBox -Description 'Aquí la descripción'

        Solicitará un texto mediante la ventana gráfica de dimensiones 150 x 150 en la cual aparecerá un texto
         'Aquí la descripción' como etiquera.
        
        .EXAMPLE
        Get-TextBox -BasicText $true

        Solicitará un texto mediante la ventana gráfica de dimensiones 150 x 85 en la cual se
        permitirá sólo el uso de una línea de texto. No habrán saltos de línea.

        .PARAMETER Height
        Parametro de tipo int32 que permite al usuario especificar el tamaño de la altura de la ventana. 
        El valor como mínimo es 150

        .PARAMETER Width
        Parametro de tipo int32 que permite al usuario especificar el tamaño de la anchura de la ventana. 
        El valor como mínimo es 150

        .PARAMETER Description
        Parametro de tipo String que nos permite establecer la descripción que aparecerá en el cuadro.
        
        .PARAMETER BasicText
        Parametro de tipo booleano que permite el activar o no la propiedad de texto básico. 
        Orientado a la recoleción de texto de una sola línea.

        .PARAMETER Title
        Parametro de tipo booleano que permite el activar o no la propiedad de texto básico. 
        Orientado a la recoleción de texto de una sola línea.
    #>
    [cmdletbinding(
        DefaultParameterSetName='Description'
    )]
    param(
            [Parameter(Position=0,ParameterSetName='Description')]
            [int32]$Height,
            [Parameter(Position=1,ParameterSetName='Description')]
            [Parameter(Position=1,ParameterSetName='Basic')]
            [int32]$Width,
            [Parameter(Position=2,ParameterSetName='Description')]
            [String]$Description,
            [Parameter(Position=2,ParameterSetName='Basic')]
            [bool]$BasicText = $false,
            [Parameter(Position=3,ParameterSetName='Description')]
            [Parameter(Position=3,ParameterSetName='Basic')]
            [string]$Title = ''
    )
    begin{
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
    }
    process{
        if(!$Height){
            $Height = 150
        }
        elseif($Height -lt 150){
            Write-Warning 'Tamaño no válido. Utilice mínimo 150 de altura'
            break
        }
        if(!$Width){
            $Width = 200
        }
        elseif($Width -lt 150){
            Write-Warning 'Tamaño no válido. Utilice mínimo 150 de anchura'
            break
        }

        $GBL_FORM = New-Object Windows.Forms.Form 
        if($Title){
            $GBL_FORM.Text = $Title
        }
        if($Description){
            $GBL_FORM.Size = New-Object Drawing.Size @($Width,($Height + 50)) 
            $GBL_FORM.MaximumSize = New-Object Drawing.Size @($Width,($Height + 50))
            $GBL_FORM.MinimumSize = New-Object Drawing.Size @($Width,($Height + 50))
        }
        elseif($BasicText){
            $GBL_FORM.Size = New-Object Drawing.Size @($Width,85) 
            $GBL_FORM.MaximumSize = New-Object Drawing.Size @($Width,85)
            $GBL_FORM.MinimumSize = New-Object Drawing.Size @($Width,85)
        }
        else{
            $GBL_FORM.Size = New-Object Drawing.Size @($Width,$Height) 
            $GBL_FORM.MaximumSize = New-Object Drawing.Size @($Width,$Height)
            $GBL_FORM.MinimumSize = New-Object Drawing.Size @($Width,$Height)
        }
        $GBL_FORM.StartPosition = "CenterScreen"
        $GBL_FORM.ShowIcon = $false

        if($BasicText){
            $GBL_TXT_BOX = New-Object System.Windows.Forms.TextBox
            $GBL_TXT_BOX.Size = New-Object System.Drawing.Size ($Width,20)
            $GBL_TXT_BOX.MaximumSize = New-Object Drawing.Size ($Width,20)
        }
        else{
            $GBL_TXT_BOX = New-Object System.Windows.Forms.RichTextBox
            $GBL_TXT_BOX.Size = New-Object System.Drawing.Size ($Width,($Height/2.5))
            $GBL_TXT_BOX.MaximumSize = New-Object Drawing.Size ($Width,($Height/2.5))  
        }
        
        $GBL_TXT_BOX.MinimumSize = New-Object Drawing.Size ($Width,20)
        $GBL_TXT_BOX.AutoSize = $false
        $GBL_TXT_BOX.AcceptsTab = $true

        if($Description){
            $GBL_TXT_BOX.Location = New-Object System.Drawing.Size(0,50)

            $GBL_LBL= New-Object System.Windows.Forms.Label
            $GBL_LBL.Location = New-Object System.Drawing.Point(0, 5)
            $GBL_LBL.Size = New-Object System.Drawing.Point($Width, 45)
            $GBL_LBL.TextAlign = "MiddleCenter"
            $GBL_LBL.Margin = 0
            $GBL_LBL.Text = $Description
            $GBL_FORM.Controls.Add($GBL_LBL)
        }
        elseif($BasicText){
            $GBL_TXT_BOX.Location = New-Object System.Drawing.Size(0,0)
        }
        else{
            $GBL_TXT_BOX.Location = New-Object System.Drawing.Size(0,0)
        }

        $GBL_FORM.Controls.Add($GBL_TXT_BOX) 

        $GBL_OK_BTN = New-Object System.Windows.Forms.Button
        $GBL_OK_BTN.Size = New-Object System.Drawing.Size(50,25)
        $GBL_OK_BTN.Text = "OK"
        $GBL_OK_BTN.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $GBL_FORM.AcceptButton = $GBL_OK_BTN
        
        $GBL_CN_BTN = New-Object System.Windows.Forms.Button
        $GBL_CN_BTN.Size = New-Object System.Drawing.Size(50,25)
        $GBL_CN_BTN.Text = "Cancel"
        $GBL_CN_BTN.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $GBL_FORM.CancelButton = $GBL_CN_BTN

        if($Description){
            $GBL_OK_BTN.Location = New-Object System.Drawing.Point(($Width/2 - 60),($Height/2.5 + 65))
            $GBL_CN_BTN.Location = New-Object System.Drawing.Point(($Width/2 + 10),($Height/2.5 + 65))
        }
        elseif($BasicText){
            $GBL_OK_BTN.Location = New-Object System.Drawing.Point(($Width/2 - 60),20)
            $GBL_CN_BTN.Location = New-Object System.Drawing.Point(($Width/2 + 10),20)
        }
        else{
            $GBL_OK_BTN.Location = New-Object System.Drawing.Point(($Width/2 - 60),($Height/2.5 + 15))
            $GBL_CN_BTN.Location = New-Object System.Drawing.Point(($Width/2 + 10),($Height/2.5 + 15))
        }

        $GBL_FORM.Controls.Add($GBL_OK_BTN)
        $GBL_FORM.Controls.Add($GBL_CN_BTN)

        $GBL_RESULT = $GBL_FORM.ShowDialog() 

        if ($GBL_RESULT -eq [System.Windows.Forms.DialogResult]::OK)
        {
            $GBL_TXT_BOX.Text
        }
    }


}